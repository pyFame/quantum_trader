# test_Position.py - Generated by CodiumAI

from enums import Symbol
from enums.Order import Order, OPEN, CLOSE
from enums.position import LONG
from trader.Position import Position

"""
Code Analysis:
- The Position class is used to manage a position in a futures market. It is designed to be used with the Binance API. The main functionality of the class is to open and close positions, calculate profit and loss, and provide information about the current position.

- The class takes in the symbol and mode (LONG or SHORT) of the position as arguments. It also has optional arguments for profit, open_args, and close_args.

- The class has methods for opening and closing positions. The open method takes in a quantity and an optional price, and returns an Order object. The close method takes in an optional price and quantity, and returns an Order object.

- The class has methods for calculating profit and loss. The pnl method takes in a price and an optional quantity, and returns the profit or loss of the position. The close_signal method takes in a price and an optional quantity, and returns True if the position should be closed based on the profit or loss.

- The class has methods for refreshing the position data and getting information about the position. The refresh method updates the quantity and entry price of the position. The liquidation_price method returns the liquidation price of the position. The ideal_price method returns the ideal price to close the position. The cost method returns the cost of the position. The precision method returns the precision of the symbol.

- The class has a disable_open field that can be set to True to prevent the position from being opened.
"""

"""
Test Plan:
- test_init(): tests that the Position object is initialized correctly. Tags: [happy path]
- test_pnl(): tests that the pnl() method returns the correct profit/loss value. Tags: [happy path]
- test_open(): tests that the open() method creates an Order object with the correct parameters. Tags: [happy path]
- test_close(): tests that the close() method creates an Order object with the correct parameters. Tags: [happy path]
- test_open_signal(): tests that the open_signal() method returns the correct boolean value. Tags: [happy path]
- test_close_signal(): tests that the close_signal() method returns the correct boolean value. Tags: [happy path]
- test_liquidation_price(): tests that the liquidation_price() property returns the correct value. Tags: [happy path]
- test_ideal_price(): tests that the ideal_price() property returns the correct value. Tags: [happy path]
- test_cost(): tests that the cost() property returns the correct value. Tags: [happy path]
- test_precision(): tests that the precision() property returns the correct value. Tags: [happy path]
- test_refresh(): tests that the refresh() method updates the Position object with the correct values. Tags: [happy path]
"""


class TestPosition:
    def test_init(self):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10, open_args={'price': 50000})
        assert position.symbol == symbol
        assert position.mode == LONG
        assert position.profit == 10
        assert position.open_args == {'symbol': symbol, 'price': 50000}
        assert position.close_args == {'symbol': symbol}
        assert position.disable_open is False
        assert position.quantity == 0
        assert position.entry_price == 0

    def test_pnl(self):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10)
        position.quantity = 2
        position.entry_price = 50000
        assert position.pnl(55000) == 10000
        assert position.pnl(45000) == -10000

    def test_open(self, monkeypatch):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10)
        quantity = 2
        price = 50000
        mock_order = Order(symbol=symbol, side=OPEN, mode=LONG, quantity=quantity, price=price, profit=10)

        open_order = position.open(quantity, price)

        assert open_order.quantity == mock_order.quantity
        assert open_order.side == mock_order.side
        assert open_order.mode == mock_order.mode

    def test_close(self, monkeypatch):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10)
        quantity = 2
        price = 50000
        mock_order = Order(symbol=symbol, side=CLOSE, mode=LONG, quantity=quantity, price=price, profit=None)

        close_order = position.close(quantity, price)

        assert close_order.quantity == mock_order.quantity
        assert close_order.side == mock_order.side
        assert close_order.mode == mock_order.mode

    def test_open_signal(self):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10)
        position.quantity = 2
        position.entry_price = 50000
        assert position.open_signal(49000) is True
        assert position.open_signal(51000) is False

    def test_close_signal(self):
        symbol = Symbol('BTC', 'USDT')
        position = Position(symbol, LONG, profit=10)
        position.quantity = 2
        position.entry_price = 50000
        assert position.close_signal(55000) is True
        assert position.close_signal(45000) is False
