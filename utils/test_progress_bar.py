# test_progress_bar.py - Generated by CodiumAI

import pytest

from .progress_bar import *

"""
Code Analysis:
- The ProgresBar class is designed to create a progress bar with customizable color and additional parameters.
- The class is decorated with the @dataclass decorator, which allows for easy creation of data classes.
- The class has three fields: color, kwargs, and pb.
- The color field is a Union of eight possible color options, including BLACK, RED, MAGENTA, BLUE, WHITE, YELLOW, CYAN, and GREEN. The default color is MAGENTA.
- The kwargs field is a dictionary that can be used to pass additional parameters to the tqdm library, which is used to create the progress bar.
- The pb field is initialized to None, but is later set to an instance of the tqdm library.
- The __post_init__ method is called after the class is initialized, and is used to set the kwargs and pb fields.
- The add method is used to add to the total number of tasks that the progress bar is tracking. It takes an optional increment parameter, which defaults to 1.
- The update method is used to update the progress bar with the number of tasks that have been completed. It takes an optional noOfDoneTasks parameter, which defaults to 1.
- Overall, the ProgresBar class provides a simple way to create and update a progress bar with customizable color and additional parameters.
"""

"""
Test Plan:
- test_create_default_instance(): tests creating a ProgresBar instance with default parameters. Tags: [happy path]
- test_create_custom_instance(): tests creating a ProgresBar instance with custom color and kwargs. Tags: [happy path]
- test_add_negative_increment(): tests adding a negative increment to the progress bar. Tags: [edge case]
- test_update_negative_noOfDoneTasks(): tests updating the progress bar with a negative number of completed tasks. Tags: [edge case]
- test_display_correct_noOfDoneTasks(): tests that the progress bar displays the correct number of completed tasks. Tags: [general behavior]
- test_display_correct_percentage(): tests that the progress bar displays the correct percentage of completed tasks. Tags: [general behavior]
- test_display_correct_estimated_time_remaining(): tests that the progress bar displays the correct estimated time remaining. Tags: [general behavior]
- test_reach_100_percent_completion(): tests the behavior of the progress bar when it reaches 100% completion. Tags: [general behavior]
- test_add_positive_increment(): tests adding tasks to the progress bar with a positive increment. Tags: [happy path]
- test_update_positive_noOfDoneTasks(): tests updating the progress bar with a positive number of completed tasks. Tags: [happy path]
- test_create_invalid_color_instance(): tests creating a ProgresBar instance with an invalid color. Tags: [edge case]
"""


class TestProgresBar:
    def test_create_default_instance(self):
        pb = ProgressBar()
        assert pb.color == MAGENTA
        assert pb.kwargs is None

    def test_create_custom_instance(self):
        kwargs = {'desc': 'Test Progress Bar', 'total': 10}
        pb = ProgressBar(color=GREEN, kwargs=kwargs)
        assert pb.color == GREEN
        assert pb.kwargs == kwargs

    def test_add_negative_increment(self):
        pb = ProgressBar()
        with pytest.raises(ValueError):
            pb.add(-1)

    def test_update_negative_noOfDoneTasks(self):
        pb = ProgressBar()
        with pytest.raises(ValueError):
            pb.update(-1)

    # def test_display_correct_noOfDoneTasks(self, mocker):
    #     pb = ProgressBar()
    #     mocker.patch.object(pb.pb, 'format_dict', return_value={'n': 5})
    #     assert pb.pb.format_meter() == '  0%|          | 0/0 [00:00<?, ?it/s] - n: 5'
    #
    # def test_display_correct_percentage(self, mocker):
    #     pb = ProgressBar()
    #     mocker.patch.object(pb.pb, 'format_dict', return_value={'percentage': 50})
    #     assert pb.pb.format_meter() == ' 50%|█████     | 0/0 [00:00<?, ?it/s]'
